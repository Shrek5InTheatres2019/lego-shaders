#version 120

varying vec4 texcoord;

uniform sampler2D colortex0;
uniform sampler2D colortex1;
uniform sampler2D depthtex0;
uniform sampler2D depthtex1;
uniform vec3 cameraPosition;


const float rayStep = 0.25;
const float minRayStep = 0.1;
const float maxSteps = 20;
const float searchDist = 5;
const float searchDistInv = 0.2;
const int numBinarySearchSteps = 5;
const float maxDDepth = 1.0;
const float maxDDepthInv = 1.0;


const float reflectionSpecularFalloffExponent = 3.0;

/* DRAWBUFFERS:0 */

vec4 getNormal(vec2 texcoords){
  return (texture2D(colortex1 , texcoords) * 2.0 - 1.0);
}

vec3 BinarySearch(vec3 dir, inout vec3 hitCoord, out float dDepth)
{
    float depth;


    for(int i = 0; i < numBinarySearchSteps; i++)
    {
        vec4 projectedCoord = gl_ProjectionMatrix * vec4(hitCoord, 1.0);
        projectedCoord.xy /= projectedCoord.w;
        projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;


        depth = texture2D(depthtex0, projectedCoord.xy).z;


        dDepth = hitCoord.z - depth;


        if(dDepth > 0.0)
            hitCoord += dir;


        dir *= 0.5;
        hitCoord -= dir;
    }


    vec4 projectedCoord = gl_ProjectionMatrix * vec4(hitCoord, 1.0);
    projectedCoord.xy /= projectedCoord.w;
    projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;


    return vec3(projectedCoord.xy, depth);
}


vec4 RayCast(vec3 dir, inout vec3 hitCoord, out float dDepth)
{
    dir *= rayStep;


    float depth;


    for(int i = 0; i < maxSteps; i++)
    {
        hitCoord += dir;


        vec4 projectedCoord = gl_ProjectionMatrix * vec4(hitCoord, 1.0);
        projectedCoord.xy /= projectedCoord.w;
        projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;


        depth = texture2D(depthtex0, projectedCoord.xy).z;


        dDepth = hitCoord.z - depth;


        if(dDepth < 0.0)
            return vec4(BinarySearch(dir, hitCoord, dDepth), 1.0);
    }


    return vec4(0.0, 0.0, 0.0, 0.0);
}

void main(){
  vec3 color = texture2D(colortex0, texcoord.st).rgb;
  vec3 depth = texture2D(depthtex1, texcoord.st).rgb;
  vec4 norm = getNormal(texcoord.st);
  #ifdef PBRTextures
    float reflectance = norm.g;
  #else
    float reflectance = 1.0;
  #endif
  vec3 reflected = normalize(reflect(-cameraPosition, norm.rgb));
  vec3 hitPos = cameraPosition;
   float dDepth;


   vec4 coords = RayCast(reflected * max(minRayStep, -cameraPosition.z), hitPos, dDepth);


   vec2 dCoords = abs(vec2(0.5, 0.5) - coords.xy);


   float screenEdgefactor = clamp(1.0 - (dCoords.x + dCoords.y), 0.0, 1.0);


   // Get color
   gl_FragData[0] = vec4(texture2D(colortex0, coords.xy).rgb,
       pow(reflectance/255, reflectionSpecularFalloffExponent) *
       screenEdgefactor * clamp(-reflected.z, 0.0, 1.0) *
       clamp((searchDist - length(cameraPosition - hitPos)) * searchDistInv, 0.0, 1.0) * coords.w);
}
